module traffic_light_optimized (
    input wire clk,
    input wire reset,
    output reg [1:0] light
);

    // State declaration using binary encoding
    localparam RED     = 2'b00,
               GREEN   = 2'b01,
               YELLOW  = 2'b10;
    reg[1:0]  current_state, next_state;

    // FSM: Sequential logic
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= RED;
        else
            current_state <= next_state;
    end

    // FSM: Next state logic
    always @(*) begin
        case (current_state)
            RED:    next_state = GREEN;
            GREEN:  next_state = YELLOW;
            YELLOW: next_state = RED;
            default: next_state = RED;
        endcase
    end

    // FSM: Output logic
    always @(*) begin
        case (current_state)
            RED:     light = 2'b01;
            GREEN:   light = 2'b10;
            YELLOW:  light = 2'b11;
            default: light = 2'b00;
        endcase
    end
endmodule


`timescale 1ns/1ps

module tb_traffic_light_optimized;

    // Testbench signals
    reg clk;
    reg reset;
    wire [1:0] light;

    // DUT instance (Device Under Test)
    traffic_light_optimized uut (
        .clk(clk),
        .reset(reset),
        .light(light)
    );

    // Clock generation: 10ns period (100MHz)
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // Toggle every 5ns
    end

    // Stimulus
    initial begin
        // Initialize
        reset = 1;
        #12;
        reset = 0;

        // Let it run for a while
        #100;

        $finish;
    end

    // Dump waveform
    initial begin
        $dumpfile("traffic_light_opt.vcd");
        $dumpvars(0, tb_traffic_light_optimized);
    end

endmodule
